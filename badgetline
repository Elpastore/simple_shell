#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

#define BUFFER_SIZE 1024

char *custom_getline(void) {
    static char buffer[BUFFER_SIZE];
    static int buffer_index = 0;
    static int bytes_read = 0;
    char *line = NULL;
    int line_index = 0;
    char c;

    while (1) {
        if (buffer_index == bytes_read) {
            // Buffer is empty or needs to be refilled
            bytes_read = read(STDIN_FILENO, buffer, BUFFER_SIZE);
            if (bytes_read <= 0) {
                // No more data to read or an error occurred
                if (line_index == 0) {
                    // Nothing read, return NULL to indicate EOF or error
                    return NULL;
                }
                break;
            }
            buffer_index = 0;
        }

        c = buffer[buffer_index++];
        if (c == '\n') {
            // End of line
            if (line == NULL) {
                line = (char *)malloc(line_index + 1);
            } else {
                char *temp = (char *)realloc(line, line_index + 1);
                if (temp == NULL) {
                    perror("realloc");
                    free(line);
                    return NULL;
                }
                line = temp;
            }
            line[line_index] = '\0';
            break;
        } else {
            if (line == NULL) {
                line = (char *)malloc(line_index + 1);
            } else {
                char *temp = (char *)realloc(line, line_index + 1);
                if (temp == NULL) {
                    perror("realloc");
                    free(line);
                    return NULL;
                }
                line = temp;
            }
            line[line_index++] = c;
        }
    }

    return line;
}

int main(void) {
    char *line;

    while (1) {
        printf("#cisfun$ ");
        fflush(stdout);
        line = custom_getline();
        if (line == NULL) {
            // EOF or error occurred
            break;
        }
        printf("You entered: %s\n", line);
        free(line);
    }

    return 0;
}

